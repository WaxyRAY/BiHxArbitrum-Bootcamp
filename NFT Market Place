// SPDX-License-Identifier: Unlicense

pragma solidity ^0.8.20;

    import "@openzeppelin/contracts/utils/Counters.sol";
    import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
    import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

    contract NFTMarketPlace is ERC721URIStorage {
        address payable owner;

        using Counters for Counters.Counter;
        Counters.Counter private _tokenIds;
        Counters.Counter private _ItemsSold;

        uint256 listPrice = 0.01 ether;

    constructor () ERC721("NFTMarketplace", "NTFM"){
        owner = payable(msg.sender);
    }

    struct ListedToken {
        uint256 tokenId;
        address payable owner;
        address payable seller;
        uint256 price;
        bool currentlyListed;
    }

    mapping (uint256 => ListedToken) private idToListedToken;

    function updatelistPrice (uint256 _listPrice) public payable{
        require(owner == msg.sender, "Only owner can update list price");
        listPrice = _listPrice;
    }  

    function getListedPrice()public view returns (uint256){
        return listPrice;
    }

    function getLatestIdTolistedToken() public view returns (ListedToken memory){
        uint256 currentTokenId = _tokenIds.current();
        return idToListedToken[currentTokenId];
    }

    function getListedForTokenId(uint256 tokenId) public view returns (ListedToken memory){
        return idToListedToken[tokenId];
    }

    function getCurrentToken() public view returns (uint256){
        return _tokenIds.current();
    }

    function createToken(string memory tokenURI, uint256 price) public payable returns (uint){
        require(msg.value ==listPrice, "Send enough ether to the list");
        require(price > 0, "Make sure the price is greater than zero");

        _tokenIds.increment();
        uint256 currentTokenId = _tokenIds.current();
        _safeMint(msg.sender, currentTokenId);

        _setTokenURI(currentTokenId, tokenURI);

        createlistedToken(currentTokenId, price);
        return currentTokenId;
    }

    function createlistedToken(uint256 tokenId, uint256 price) private {
        idToListedToken[tokenId] = ListedToken(
            tokenId,
            payable(address(this)), 
            payable(msg.sender),
            price,
            true
        );

        _transfer(msg.sender, address(this), tokenId);
    }

    function getAllNFT() public view returns(ListedToken[] memory){
        uint nftcount = _tokenIds.current();
        ListedToken[] memory tokens = new ListedToken[] (nftcount);

        uint currentIndex = 0;

        for (uint i=0; i<nftcount;i++){
            uint currentId = 1 + 1;
            ListedToken storage currentitem = idToListedToken[currentId];
            tokens[currentIndex] = currentitem;
            currentIndex += 1;
        }
        
        return tokens;
    } 

    function getMyNFTs() public view returns (ListedToken[] memory) {
         uint nftCount = _tokenIds.current();
        ListedToken[] memory tokens = new ListedToken[](nftCount);
        uint currentIndex = 0;

        
        for(uint i=0;i<nftCount;i++)
        {
            uint currentId = i + 1;
            ListedToken storage currentItem = idToListedToken[currentId];
            tokens[currentIndex] = currentItem;
            currentIndex += 1;
        }
        
        return tokens;
    }

        function executeSale(uint256 tokenId) public payable {
        uint price = idToListedToken[tokenId].price;
        address seller = idToListedToken[tokenId].seller;
        require(msg.value == price, "Please submit the asking price in order to complete the purchase");

        idToListedToken[tokenId].currentlyListed = true;
        idToListedToken[tokenId].seller = payable(msg.sender);
        _ItemsSold.increment();

        _transfer(address(this), msg.sender, tokenId);
        approve(address(this), tokenId);

        payable(owner).transfer(listPrice);
        payable(seller).transfer(msg.value);
    }

        function updateListPrice(uint256 _listPrice) public payable {
        require(owner == msg.sender, "Only owner can update listing price");
        listPrice = _listPrice;
    }

    function getListPrice() public view returns (uint256) {
        return listPrice;
    }

    function getLatestIdToListedToken() public view returns (ListedToken memory) {
        uint256 currentTokenId = _tokenIds.current();
        return idToListedToken[currentTokenId];
    }

    function getListedTokenForId(uint256 tokenId) public view returns (ListedToken memory) {
        return idToListedToken[tokenId];
    }

}

